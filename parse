#!/usr/bin/env node

'use strict';

const config = require('./config.js');
const events = require('events');
const Logger = require('./logger.js');
const parser = require('./parser.js');
const path = require('path');
const readline = require('readline');
const log = new Logger('parse');

function onUnhandledRejection(e) {
    log.error('Abort due to unhandledRejection!');
    log.error(e);
    process.exit(99);
}

function onUncaughtException(e) {
    log.error('Abort due to uncaughtException!');
    log.error(e);
    process.exit(99);
}

process.on('unhandledRejection', onUnhandledRejection);
process.on('uncaughtException', onUncaughtException);

function exitUsage(code) {
    code = code || 0;
    var stream = code ? process.stderr : process.stdout;
    stream.write('Usage: ' + path.basename(process.argv[1]) + ' [OPTION]...\n' +
        'Standalone command to parse an nscan stream\n' +
        '\n' +
        'Available options:\n' +
        '  -f, --config FILE        Set configuration file\n' +
        '  -v, --verbose            Increase verbosity\n' +
        '\n' +
        'The input stream in nscan format is read from stdin, output\n' +
        'is printed on stdout.\n');
    process.exit(1);
}

var opts = { log: { } }
for (let i = 2; i < process.argv.length; i++) {
    if ((process.argv[i] == '-f' ||
         process.argv[i] == '--config') && i < process.argv.length - 1)
        opts.config = process.argv[++i];
    else if (process.argv[i] == '-v' ||
             process.argv[i] == '--verbose')
        opts.log.verbose = (opts.log.verbose || 0) + 1;
    else if (process.argv[i].charAt(0) == '-') {
        for (let j = 1; j < process.argv[i].length; j++) {
            let c = process.argv[i].charAt(j);
            switch (c) {
                case 'v': opts.log.verbose = (opts.log.verbose || 0) + 1; break;
                default: exitUsage(1);
            }
        }
    }
    else
        exitUsage(1);
}

config.reload(opts);
parser.reload();

(async () => {
    var np = parser.nscanParser('stdin');
    var reader = readline.createInterface({ input: process.stdin, crlfDelay: Infinity });
    reader.on('line', (line) => parser.onNscanLine(np, line));
    await events.once(reader, 'close');
    parser.onNscanClose(np);
    process.stdout.write(JSON.stringify(np.db));
})();
